EqualitySyntax {

 fn start {
       objectComparisonTest()
       primitiveComparisonTest()
       primitiveComparisonTest2()
       objectComparisonTest2()
       booleanNegationTest()
 }

 fn primitiveComparisonTest {
     var a:Int = 3
     var b:Int = 3

     print "Comparing primitive " + a +" and " + b

     var result = a == b
     assert(expected -> true , actual -> result)

     var result = a != b
     assert(expected -> false , actual -> result)

     var result = a > b
     assert(expected -> false , actual -> result)

     var result = a < b
     assert(expected -> false , actual -> result)

     var result = a >= b
     assert(expected -> true , actual -> result)

     var result = a <= b
     assert(expected -> true , actual -> result)


 }

 fn booleanNegationTest(){
    print "Doing boolean negation"

    var result = !false
    assert(expected -> true , actual -> result)

 }

 fn objectComparisonTest() {
     var a:Int = 3
     var b:Int = 3

      print "Comparing integer " + a +" and " + b


     var result = a == b
     assert(expected -> true , actual -> result)

     var result = a != b
     assert(expected -> false , actual -> result)

     var result = a > b
     assert(expected -> false , actual -> result)

     var result = a < b
     assert(expected -> false , actual -> result)

     var result = a >= b
     assert(expected -> true , actual -> result)

     var result = a <= b
     assert(expected -> true , actual -> result)
 }

 fn primitiveComparisonTest2 {
      var a = 3
      var b = 4

     print "Comparing primitive " + a +" and " + b


        var result = a == b
        assert(expected -> false , actual -> result)

        var result = a != b
        assert(expected -> true , actual -> result)

        var result = a > b
        assert(expected -> false , actual -> result)

        var result = a < b
        assert(expected -> true , actual -> result)

        var result = a >= b
        assert(expected -> false , actual -> result)

        var result = a <= b
        assert(expected -> true , actual -> result)
  }

 fn objectComparisonTest2() {
      var a = 3
      var b = 4

    print "Comparing integer " + a +" and " + b

      var result = a == b
      assert(expected -> false , actual -> result)

      var result = a != b
      assert(expected -> true , actual -> result)

      var result = a > b
      assert(expected -> false , actual -> result)

      var result = a < b
      assert(expected -> true , actual -> result)

      var result = a >= b
      assert(expected -> false , actual -> result)


      var result = a <= b
      assert(actual -> result, expected -> true )
  }

  fn assert(Boolean actual,Boolean expected) {
    if (actual == expected) {
        print "OK"
    }
    else {
        print "TEST FAILED"
    }
  }
}